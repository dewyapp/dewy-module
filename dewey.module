<?php
/**
 * @file
 * Code for the Dewey module
 */

/**
 * Implements hook_menu()
 */

function dewey_menu() {
  $items = array();

  $items['admin/config/system/dewey'] = array(
    'title' => 'Dewey',
    'description' => 'Dewey Drupal module configuration page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dewey_config'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/reports/dewey'] = array(
    'title' => 'Dewey report',
    'description' => 'Information about your site for Dewey.',
    'page callback' => 'dewey_report',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function dewey_page_build(&$page) {
  $settings = array(
    'url' => url(drupal_get_path('module', 'dewey').'/php/dewey_counter.php'),
    'data' => array(
      'path' => current_path(),
      'drupal' => DRUPAL_ROOT,
    ),
  );
  $page['content'][] = array(
    '#attached' => array(   
      'js' => array(
        drupal_get_path('module', 'dewey') . '/js/dewey_counter.js' => array(),
      ),
    ),
  );
  $page['content']['#attached']['js'][] = array(
    'data' => array('dewey' => $settings),
    'type' => 'setting',
  );
}

function dewey_config($form, &$form_state) {
  $form['dewey_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Dewey to report on this site'),
    '#default_value' => variable_get('dewey_enabled', 1),
    '#description' => t('Enable Dewey to communicate with this site to generate reports for you.'),
  );
  $form['dewey_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Dewey API key'),
    '#size' => 30,
    '#maxlength' => 30,
    '#description' => t('The API key of your Dewey account. This will ensure your site links to your Dewey account. <a href="">Get a Dewey API key</a>.'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

function dewey_report() {
  // Get the timestamp of when the report was taken
  $output['audited'] = time();

  // Get Drupal core version
  $output['core'] = VERSION;

  // Get path accesses
  $result = db_query("SELECT path, hits, lastaccess FROM dewey_counter");
  while ($path = $result->fetchAssoc()) {
    $output['paths'][$path['path']] = array('hits' => $path['hits'], 'last_access' => $path['lastaccess']);
  }

  // Get the file count and file sizes
  $types = array('public', 'private');

  $path['public'] = variable_get('file_public_path', conf_path() . '/files');
  $path['private'] = variable_get('file_private_path');

  foreach($types as $type) {
    $output['file_count'][$type] = 0;
    $output['file_size'][$type] = 0;

    if (is_dir($path[$type])) {
      $iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path[$type], RecursiveDirectoryIterator::SKIP_DOTS), RecursiveIteratorIterator::SELF_FIRST);
      $filelist = array();
      foreach($iterator as $file) {
        if (!$file->isDir()) {
          $output['file_count'][$type]++;
          $output['file_size'][$type] += $file->getSize();
        }
      }
    }
  }

  // Get all users, roles and last signons
  $output['users'] = array();
  $output['roles'] = array();
  $output['last_access'] = 0;

  $result = db_query("SELECT users.name AS name, mail, access, status, role.name AS role FROM users, role, users_roles WHERE users.uid = users_roles.uid AND users_roles.rid = role.rid");
  while ($user = $result->fetchAssoc()) {
    if (isset($output['users'][$user['name']] )) {
      $output['users'][$user['name']]['role'][] = $user['role'];
    } else {
      $output['users'][$user['name']] = $user;
      $output['users'][$user['name']]['role'] = array($user['role']);
      if ($user['access'] > $output['last_access']) {
        $output['last_access'] = $user['access'];
      }
    }

    if (isset($output['roles'][$user['role']])) {
      $output['roles'][$user['role']]++;
    } else {
      $output['roles'][$user['role']] = 1;
    }
  }

  // Get all content types and content
  $output['content_types'] = array();

  $result = db_query("SELECT count(nid) as count, type FROM node");
  while ($content_type = $result->fetchAssoc()) {
    $output['content_types'][$content_type['type']] = intval($content_type['count']);
  }

  if (db_table_exists('field_data_body')) {
    $result = db_query("SELECT body_value FROM field_data_body");
    while ($body = $result->fetchAssoc()) {
      $body = strtolower(convert_html_to_text($body['body_value']));
      $output['words'] .= $body;
    }
  }

  $result = db_query("SELECT changed FROM node ORDER BY changed DESC LIMIT 1");
  $changed = $result->fetchAssoc();
  $output['last_modified'] = $changed['changed'];

  // Get all enabled modules
  $modules = system_list('module_enabled');
  foreach ($modules as $module => $module_info) {
    $output['modules'][$module_info->info['project']][$module_info->name] = array('schema' => $module_info->schema_version, 'version' => $module_info->info['version']);
  }

  // Get all custom themes
  $themes = list_themes(TRUE);
  foreach ($themes as $theme) {
    if ($theme->info['package'] != 'Core') {
      $output['themes'][$theme->name] = array('version' => $theme->info['version']);
    }
  }

  print json_encode($output);
}