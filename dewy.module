<?php
/**
 * @file
 * Code for the Dewy module
 */

/**
 * Implements hook_menu()
 */

function dewy_menu() {
  $items = array();

  $items['admin/config/system/dewy'] = array(
    'title' => 'Dewy',
    'description' => 'Dewy configuration page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dewy_config'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/reports/dewy'] = array(
    'title' => 'Dewy report',
    'description' => 'Information about your site for Dewy.',
    'page callback' => 'dewy_report',
    'access callback' => 'dewy_report_access_callback',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function dewy_page_build(&$page) {
  $settings = array(
    'url' => url(drupal_get_path('module', 'dewy').'/php/dewy_counter.php'),
    'data' => array(
      'path' => current_path(),
      'drupal' => DRUPAL_ROOT,
    ),
  );
  $page['content'][] = array(
    '#attached' => array(   
      'js' => array(
        drupal_get_path('module', 'dewy') . '/js/dewy_counter.js' => array(),
      ),
    ),
  );
  $page['content']['#attached']['js'][] = array(
    'data' => array('dewy' => $settings),
    'type' => 'setting',
  );
}

function dewy_config($form, &$form_state) {
  $form['dewy_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Dewy to report on this site'),
    '#default_value' => variable_get('dewy_enabled', 1),
    '#description' => t('Enable Dewy to communicate with this site to generate reports for you.'),
  );
  $form['dewy_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Dewy API key'),
    '#default_value' => variable_get('dewy_api_key', ''),
    '#size' => 30,
    '#maxlength' => 30,
    '#description' => t('The API key of your Dewy account. This will ensure your site links to your Dewy account. <a href="">Get a Dewy API key</a>.'),
    '#required' => TRUE,
  );
  $form['#validate'][] = 'dewy_api_key_validate';

  return system_settings_form($form);
}

function dewy_api_key_validate(&$elements, &$form_state, $form_id = NULL) {
  $data = 'api_key='.$form_state['values']['dewy_api_key'].'&site='.$GLOBALS['base_url'];
  $options = array(
    'method' => 'POST',
    'data' => $data,
    'timeout' => 15,
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
  );
  $result = drupal_http_request('http://dewy.io/intake', $options);
  switch($result->code) {
    case '0':
      form_set_error('dewy_api_key','Dewy API key is not valid.');
    default:
      form_set_error('dewy_api_key','Dewy is unreachable, the API key cannot be verified at this time.');
  }
}

function dewy_report_access_callback() {
  if (variable_get('dewy_enabled', 0) == 1) {
    $allowed_viewers = array('127.0.0.1', '::1', gethostbyname("dewy.io"));
    foreach ($allowed_viewers as $viewer) {
      if (ip_address() == $viewer) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

function dewy_report() {
  // Get the timestamp of when the report was taken
  $output['audited'] = time();

  // Get paths
  $output['base_url'] = $GLOBALS['base_url'];

  // Get Drupal version
  $output['drupal_core'] = VERSION;

  // Get maintenance mode
  $output['maintenance'] = variable_get('maintenance_mode');

  // Get path accesses
  $ignores = array('admin');
  $result = db_query("SELECT path, hits, lastaccess FROM dewy_counter");
  while ($path = $result->fetchAssoc()) {
    foreach ($ignores as $ignore) {
      if (substr($path['path'], 0, strlen($ignore)) != $ignore) {
        $output['traffic'][$path['path']] = array('hits' => $path['hits'], 'last_access' => $path['lastaccess']);
      }
    }
  }

  // Get the file count and file sizes
  $types = array('public', 'private');

  $path['public'] = variable_get('file_public_path', conf_path() . '/files');
  $path['private'] = variable_get('file_private_path');

  foreach($types as $type) {
    $output['files'][$type]['count'] = 0;
    $output['files'][$type]['size'] = 0;

    if (is_dir($path[$type])) {
      $iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path[$type], RecursiveDirectoryIterator::SKIP_DOTS), RecursiveIteratorIterator::SELF_FIRST);
      $filelist = array();
      foreach($iterator as $file) {
        if (!$file->isDir()) {
          $output['files'][$type]['count']++;
          $output['files'][$type]['size'] += $file->getSize();
        }
      }
    }
  }

  // Get all users, roles and last signons
  $result = db_query("SELECT users.name AS name, mail, access AS last_access, status, role.name AS role FROM users, role, users_roles WHERE users.uid = users_roles.uid AND users_roles.rid = role.rid");
  while ($user = $result->fetchAssoc()) {
    if (isset($output['users'][$user['name']] )) {
      $output['users'][$user['name']]['role'][] = $user['role'];
    } else {
      $output['users'][$user['name']] = $user;
      $output['users'][$user['name']]['role'] = array($user['role']);
    }
  }

  // Get all node content
  $result = db_query("SELECT nid, type, created, changed FROM node");
  while ($node = $result->fetchAssoc()) {
    $output['content']['nodes'][$node['nid']] = array('created' => $node['created'], 'changed' => $node['changed'], 'type' => $node['type']);
  }

  $fields = field_info_fields();
  foreach ($fields as $field) {
    if ($field['module'] == 'text') {
      $table = _field_sql_storage_tablename($field);
      $column = _field_sql_storage_columnname($field['field_name'], 'value');
      $result = db_select($table, 'field')
      ->fields('field', array($column, 'entity_id'))
      ->condition('entity_type', 'node', '=')
      ->execute();
    }
    while ($field = $result->fetchAssoc()) {
      $words = preg_split("/[\s,]+/", strtolower($field[$column]));
      foreach ($words as $word) {
        $output['content']['nodes'][$field['entity_id']]['words'][] = $word;
      }
    }
  }

  // Get all block content
  $result = db_select('block_custom', 'block')
  ->fields('block', array('bid', 'body'))
  ->execute();
  while ($block = $result->fetchAssoc()) {
    $words = preg_split("/[\s,]+/", strtolower($block['body']));
    foreach ($words as $word) {
      $output['content']['blocks'][$block['bid']]['words'][] = $word;
    }
  }

  // Get all enabled modules and possible schema updates
  require_once DRUPAL_ROOT . '/includes/install.inc';
  drupal_load_updates();
  $modules = system_list('module_enabled');
  foreach ($modules as $module => $module_info) {
    $schemas = drupal_get_schema_versions($module_info->name);
    $latest_schema = 0;
    if ($schemas !== FALSE) {
      $latest_schema = max($schemas);
    }
    $output['modules'][$module_info->info['project']][$module_info->name] = array('schema' => $module_info->schema_version, 'latest_schema' => $latest_schema, 'version' => $module_info->info['version'], 'dependencies' => $module_info->info['dependencies']);
  }

  // Get all custom themes
  $themes = list_themes(TRUE);
  foreach ($themes as $theme) {
    if ($theme->info['package'] != 'Core') {
      $output['themes'][$theme->name] = array('version' => $theme->info['version']);
    }
  }

  print drupal_json_output($output);
}